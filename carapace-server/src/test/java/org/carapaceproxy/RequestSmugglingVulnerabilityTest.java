package org.carapaceproxy;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.findAll;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static org.junit.Assert.assertEquals;
import com.github.tomakehurst.wiremock.junit.WireMockRule;
import com.github.tomakehurst.wiremock.verification.LoggedRequest;
import java.util.List;
import org.carapaceproxy.core.HttpProxyServer;
import org.carapaceproxy.utils.RawHttpClient;
import org.carapaceproxy.utils.TestEndpointMapper;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

public class RequestSmugglingVulnerabilityTest {

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(0);

    @Rule
    public TemporaryFolder tmpDir = new TemporaryFolder();

    /**
     * Extract status code from HTTP status line (e.g., "HTTP/1.1 200 OK" -> 200)
     */
    private int getStatusCode(RawHttpClient.HttpResponse response) {
        String statusLine = response.getStatusLine();
        String[] parts = statusLine.split(" ");
        if (parts.length >= 2) {
            return Integer.parseInt(parts[1]);
        }
        throw new IllegalArgumentException("Invalid status line: " + statusLine);
    }


    @Test
    public void testCL0AttackGoesThrough() throws Exception {
        stubFor(post(urlEqualTo("/legitimate"))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "text/plain")
                        .withBody("LEGITIMATE_RESPONSE")));
        stubFor(get(urlEqualTo("/admin"))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "text/plain")
                        .withBody("ADMIN_ACCESS")));
        TestEndpointMapper mapper = new TestEndpointMapper("localhost", wireMockRule.port());
        try (HttpProxyServer server = HttpProxyServer.buildForTests("localhost", 0, mapper, tmpDir.newFolder())) {
            server.start();
            int port = server.getLocalPort();
            try (RawHttpClient client = new RawHttpClient("localhost", port)) {
                // CL.0 attack: Content-Length: 0 but body contains smuggled request
                client.executeRequest("""
                        POST /legitimate HTTP/1.1\r
                        Host: localhost\r
                        Content-Length: \t0\r
                        Connection: close\r
                        \r
                        GET /admin HTTP/1.1\r
                        Host: localhost\r
                        \r
                        """);
                List<LoggedRequest> adminRequests = findAll(getRequestedFor(urlEqualTo("/admin")));
                assertEquals("Smuggled request should NOT reach backend (secure behavior)", 0, adminRequests.size());
            }
        }
    }

    @Test
    public void testCLTEAttackGoesThrough() throws Exception {
        stubFor(post(urlEqualTo("/search"))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "text/plain")
                        .withBody("SEARCH_RESULTS")));
        stubFor(post(urlEqualTo("/admin/delete"))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "text/plain")
                        .withBody("DELETED")));
        TestEndpointMapper mapper = new TestEndpointMapper("localhost", wireMockRule.port());
        try (HttpProxyServer server = HttpProxyServer.buildForTests("localhost", 0, mapper, tmpDir.newFolder())) {
            server.start();
            int port = server.getLocalPort();
            try (RawHttpClient client = new RawHttpClient("localhost", port)) {
                // CL.TE attack: Conflicting Content-Length and Transfer-Encoding headers
                client.executeRequest("""
                        POST /search HTTP/1.1\r
                        Host: localhost\r
                        Content-Length: 4\r
                        Transfer-Encoding: chunked\r
                        Connection: close\r
                        \r
                        4\r
                        test\r
                        0\r
                        \r
                        POST /admin/delete HTTP/1.1\r
                        Host: localhost\r
                        Content-Length: 0\r
                        \r
                        """);
                List<LoggedRequest> adminRequests = findAll(postRequestedFor(urlEqualTo("/admin/delete")));
                assertEquals("Smuggled request should NOT reach backend (secure behavior)", 0, adminRequests.size());
            }
        }
    }

    @Test
    public void testNormalRequestWorks() throws Exception {
        stubFor(get(urlEqualTo("/normal"))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "text/plain")
                        .withBody("NORMAL_RESPONSE")));
        TestEndpointMapper mapper = new TestEndpointMapper("localhost", wireMockRule.port());
        try (HttpProxyServer server = HttpProxyServer.buildForTests("localhost", 0, mapper, tmpDir.newFolder())) {
            server.start();
            int port = server.getLocalPort();
            try (RawHttpClient client = new RawHttpClient("localhost", port)) {
                RawHttpClient.HttpResponse response = client.executeRequest("""
                        GET /normal HTTP/1.1\r
                        Host: localhost\r
                        Connection: close\r
                        \r
                        """);
                assertEquals("Normal request should succeed", 200, getStatusCode(response));
                assertEquals("Should receive expected response", "NORMAL_RESPONSE", response.getBodyString());
                List<LoggedRequest> requests = findAll(getRequestedFor(urlEqualTo("/normal")));
                assertEquals("Exactly one request should reach backend", 1, requests.size());
            }
        }
    }
}
