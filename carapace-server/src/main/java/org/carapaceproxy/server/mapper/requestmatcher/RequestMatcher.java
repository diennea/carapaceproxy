/* Generated By:JavaCC: Do not edit this line. RequestMatcher.java */
package org.carapaceproxy.server.mapper.requestmatcher;

import io.netty.handler.codec.http.HttpRequest;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.regex.Pattern;
import org.carapaceproxy.server.RequestHandler;

public class RequestMatcher implements RequestMatcherConstants {
    private static final RequestMatcher matcher = new RequestMatcher(new StringReader(""));
    private HttpRequest request;

    /* Main method to call to check request matching over a matchingCondition:
    *   - all
    *   - https
    *   - regexp '.*index.*'
    *   - regexp '.*index.*' and not https
    */
    public static boolean matches(HttpRequest request, String matchingCondition) throws ParseException, IOException {
        matcher.request = request;
        Reader reader = new StringReader(matchingCondition);
        try {
            matcher.ReInit(reader);
            return matcher.parse();
        } finally {
            reader.close();
        }
    }

/** Top level production. */
  final public boolean parse() throws ParseException {
    String regexp;
    boolean cond;
    boolean expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
      jj_consume_token(ALL);
            {if (true) return true;}
      break;
    case NOT:
    case HTTPS:
    case O_BRACKET:
      cond = expression();
                          {if (true) return cond;}
      break;
    case REGEXP_DEF:
      jj_consume_token(REGEXP_DEF);
      regexp = jj_consume_token(REGEXP).image;
            regexp = regexp.substring(1, regexp.length() - 1);
            cond = Pattern.compile(regexp).matcher(this.request.uri()).matches();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          expr = expression();
                                        cond &= expr;
          break;
        case OR:
          jj_consume_token(OR);
          expr = expression();
                                       cond |= expr;
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
          {if (true) return cond;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean expression() throws ParseException {
    boolean term;
    term = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
               term |= term();
    }
      {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public boolean term() throws ParseException {
    boolean factor;
    factor = factor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
                factor &= factor();
    }
      {if (true) return factor;}
    throw new Error("Missing return statement in function");
  }

  final public boolean factor() throws ParseException {
    boolean value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HTTPS:
      value = value();
                      {if (true) return value;}
      break;
    case NOT:
      jj_consume_token(NOT);
      value = factor();
                             {if (true) return !value;}
      break;
    case O_BRACKET:
      jj_consume_token(O_BRACKET);
      value = expression();
      jj_consume_token(C_BRACKET);
      {if (true) return value;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean value() throws ParseException {
    jj_consume_token(HTTPS);
              {if (true) return RequestHandler.PROTO_HTTPS.equals(this.request.headers().get(RequestHandler.HEADER_X_FORWARDED_PROTO, ""));}
    throw new Error("Missing return statement in function");
  }

  public RequestMatcherTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x180,0x180,0xe60,0x100,0x80,0xe00,};
   }

  public RequestMatcher(java.io.InputStream stream) {
     this(stream, null);
  }
  public RequestMatcher(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RequestMatcherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public RequestMatcher(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RequestMatcherTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public RequestMatcher(RequestMatcherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(RequestMatcherTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[14];
    for (int i = 0; i < 14; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
