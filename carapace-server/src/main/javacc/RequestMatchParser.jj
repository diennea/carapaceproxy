options {
    STATIC = false;
    IGNORE_CASE = true;
    UNICODE_INPUT = true;    
}

PARSER_BEGIN(RequestMatchParser)

package org.carapaceproxy.server.mapper.requestmatcher.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.carapaceproxy.server.mapper.requestmatcher.AndRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.SecureRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.MatchAllRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.NotRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.OrRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.RequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.RegexpRequestMatcher;
import org.carapaceproxy.server.mapper.requestmatcher.EqualsRequestMatcher;
import org.carapaceproxy.server.config.ConfigurationNotValidException;

/**
 * Criteria to apply a route to a request
 */
public class RequestMatchParser {
    private String matchingCondition;   

    public RequestMatchParser(String matchingCondition) {
        this(new StringReader(matchingCondition));
        this.matchingCondition = matchingCondition;
    }

    public String getMatchingCondition() {
        return matchingCondition;
    }
}


PARSER_END(RequestMatchParser)   

SKIP :
{
    " " |
    "\t" |
    "\n" |
    "\r"
}

TOKEN :
{
    < ALL: "all" > |
    < SECURE: "secure" > |
    < AND: "and" > |
    < OR: "or" > |
    < NOT: "not" > |
    < O_BRACKET: "(" > |
    < C_BRACKET: ")" > |
    < EQUALS: "=" > |
    < REGEXP_DEF: "~" > |
    < STRING: "\"" (~["\""])* "\"" > { matchedToken.image = matchedToken.image.substring(1, matchedToken.image.length() - 1);} |
    < NAME: (["a"-"z","A"-"Z","_"])(["a"-"z","A"-"Z","0"-"9","-","_","."])* >
}

/* Main method to call to build a proper RequestMatcher over given matchingCondition
    *   - all
    *   - secure
    *   - request.uri ~ ".*index.*"
    *   - request.uri ~ ".*index.*" and not secure
    *   - request.PROPERTY_NAME = VALUE and secure
    */
RequestMatcher parse() throws ConfigurationNotValidException:
{        
    RequestMatcher matcher;    
}
{
    <ALL> <EOF> { return new MatchAllRequestMatcher(); } |                
    { return orExpression(false); }
}

RequestMatcher orExpression(boolean wrap) throws ConfigurationNotValidException:
{    
    List<RequestMatcher> matchers = new ArrayList();
}
{
    { matchers.add(andExpression()); }
    (
            <OR> { matchers.add(andExpression()); }
    )*
    { return new OrRequestMatcher(matchers, wrap); }
}

RequestMatcher andExpression() throws ConfigurationNotValidException:
{
    List<RequestMatcher> matchers = new ArrayList();
}
{
    { matchers.add(basicExpression()); }
    (
            <AND> { matchers.add(basicExpression()); }
    )*
    { return new AndRequestMatcher(matchers); }
}

RequestMatcher basicExpression() throws ConfigurationNotValidException:
{
    RequestMatcher basicMatcher;
}
{
    (
        <NOT> basicMatcher = basicExpression() { return new NotRequestMatcher(basicMatcher); } |
    
        <O_BRACKET> basicMatcher = orExpression(true) <C_BRACKET> |
    
        basicMatcher = basicMatcher()
    )
    { return basicMatcher; }
}

RequestMatcher basicMatcher() throws ConfigurationNotValidException:
{}
{
    <SECURE> { return new SecureRequestMatcher(); } |
    { return compareMatcher(); }
}

RequestMatcher compareMatcher() throws ConfigurationNotValidException:
{
    String name; // property to compare
    String value;
}
{
    name = <NAME>.image (
        <REGEXP_DEF> value = <STRING>.image { return new RegexpRequestMatcher(name, value); } |
        <EQUALS> value = <STRING>.image { return new EqualsRequestMatcher(name, value); }
    )
}